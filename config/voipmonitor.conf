#
# voipmonitor.org configuration file
#
# location of this file is at ~/.voipmonitor.conf or /etc/voipmonitor.conf
# command line parameters overrides configuration directives in this file
# allowed comments are ; or #. 
#

[general]

# in case of running more voipmonitor instances on the same or another servers configured to save to one database and the same cdr table
# it is possible to differentiate CDR by id_sensor column. If you set id_sensor >= 0 the number will be saved in cdr.id_sensor column.
#id_sensor = 1

# listening interface. Can be 'any' which will listen on all interfaces - NOTE that "any" will not put intefaces into promiscuous mode and you have to do it with "ifconfig eth0 promisc"
# check if you are not using -i ethX argument in command line as it has more priority 
# than this configuration file
interface = eth0

# in case the SIP(media) server is behind public IP (1.1.1.1) NATed to private IP (10.0.0.3) to sniff all traffic correctly you can 
# specify alias for this case. You can specify more netaliases duplicating rows. 
# in most cases this is not necessary because voipmonitor is able to track both RTP streams based on the other side IP. But 
# if the stream is incoming from another IP then SIP source signalization and also from another IP than the SIP device which is 
# also behind NAT its impossible to track the correct IP. Please note that this is for case where the SIP server is behind NAT
# and also the client is behind NAT. If your SIP server has public IP do not bother with this. 
#natalias = 1.1.1.1 10.0.0.3
#natalias = 1.1.1.2 10.0.0.3
#natalias = 1.1.1.3 10.0.0.4


# define bind address for manager interface. Default is 127.0.0.1 
# it is not recommended to change this unless really needed due to 
# security. If you need it on some other IP make sure you set firewall
# and change the standard port for better security
#managerip = 127.0.0.1

# define TCP manager port
managerport = 5029

# define SIP ports wihch will voipmonitor liste. For each port make new line with sipport = port (multiple lines)
sipport = 5060
#sipport = 5061
#sipport = 5062

# Set ring buffer in MB (feature of newer >= 2.6.31 kernels). If you see voipmonitor 
# dropping packets in syslog upgrade to newer kernel and increase --ring-buffer to 
# higher MB. It is buffer between pcap library and voipmonitor. The most reason why 
# voipmonitor drops packets is waiting for I/O operations (switching to ext4 from 
# ext3 also helps. Defaults to 10 MB. WARNING: if you set it to much (over 2000) it 
# will silently default to some low value - libpcap does not warns so the only way is 
# to check how much memory voipmonitor uses right after start. 
ringbuffer = 20

# vmbuffer is user space buffers in MB which is used in case there is more then 1 CPU and the sniffer
# run two threads - one for reading data from libpcap and writing to vmbuffer and second reads data from
# vmbuffer and process it. For very high network loads set this to very high number. Or in case the system
# is droping packets (which is logged to syslog) increase this value. 
# default is 20 MB - increase to 1000 or more for > 500 calls
vmbuffer = 50

# number of threads to process RTP packets. If not specified it will be number of available CPUs.
# If equal to zero RTP threading is turned off. Each thread allocates default 20MB for buffers. This
# buffer can be controlled with rtpthread-buffer
# For < 150 concurrent calls you can turn it off"
#rtpthreads = 0

# size of rtp thread ring buffer in MB. Default is 20MB per thread - increase it at least to 100 for huge traffic (> 500 simultaneous calls) 
#rtpthread-buffer 100

# jitter buffer simulator variants. By default voipmonitor uses three types of jitterbuffer simulator to compute MOS score. 
# First variant is saved into cdr.[ab]_f1 and represents MOS score for devices which has only fixed 50ms jitterbuffer. 
# Second variant is same as first but for fixed 200ms and is saved to cdr.[ab]_f2
# Third varinat is adaptive jitterbuffer simulator up to 500ms
# Jitterbuffer simulator is the most CPU intensive task which is voipmonitor doing. If you are hitting CPU 100% turn
# off some of the jitterbuffer simulator. I'm recomending to use only fixed 200ms if you need to save some CPU cycles. 
#jitterbuffer_f1 = no
#jitterbuffer_f2 = yes
#jitterbuffer_adapt = no

# this is important option if voipmonitor is sniffing on SIP proxy and see both RTP leg of CALL.
# in that case use this option. It will analyze RTP only for the first LEG and not each 4 RTP
# streams which will confuse voipmonitor. Drawback of this switch is that voipmonitor will analyze
# SDP only for SIP packets which have the same IP and port of the first INVITE source IP
# and port. It means it will not work in case where phone sends INVITE from a.b.c.d:1024 and
# SIP proxy replies to a.b.c.d:5060. If you have better idea how to solve this problem better
# please contact support@voipmonitor.org
rtp-firstleg = no

# duplicate check do md5 sum for each packet and if md5 is same as previous packet it will discard it
# WARNING: md5 is expensive function (slows voipmonitor 3 times) so use it only if you have enough CPU or 
# for pcap conversion only 
#deduplicate = yes

# enable/disable updating called number from To: header from each caller INVITE. Default is enabled so it supports overlap dialing (RFC 3578)
# if you want to disable this behaviour and see always number only from the first INVITE set sipoverlap = no
#sipoverlap = yes

# save sip REGISTER messages
sip-register = no

# if yes, voipmonitor will not save CDR to MySQL 
nocdr = no

# save SIP packets to pcap file
savesip = yes		

# save RTP packets to pcap file. savertp = yes automatically saves RTCP packets
# you can also save only RTP header without AUDIO: savertp = header
# if save RTP is aneblad it will also save UDPTL packets (used for T.38) 
savertp = yes
#savertp = header

# save UDPTL packets (T.38). If savertp = yes the UDPTL packets are saved automatically. If savertp = no and you want 
# to save only udptl packets enable saveudptl = yes and savertp = no
#saveudptl = yes

# save RTCP packets to pcap file
savertcp = yes

# save RTP payload to audio file. Choose 'wav' for WAV PCM or 'ogg' for OGG 25kbps format. 
# please note that this has great impact on I/O and can overload your storage leading to lose packets. Better way is to store only sip+rtp and 
# convert wav files on demand. 
#saveaudio = wav

# save graph data for web GUI. If you want to complress it, put here gzip
savegraph = plain

# if any of SIP message during the call contains header X-VoipMonitor-norecord call will be not converted to wav and pcap file will be deleted.
#norecord-header = yes

# if any of SIP message during the call contains DTMF INFO sequence "*0" call will be not converted to wav and pcap file will be deleted.
#norecord-dtmf = yes

# enable MOS score for G.729 codec. If enabled, all cdr with 0 packet loss and stable delays will have maximum MOS of 3.92 
# and for loss and unstable delay MOS will be calculated according to ITU-T objective PESQ method for G.729 codec. 
# if you want to use MOS as good search value which corellates loss and delay into single value leave it disabled (which is 
# by default). If set to no, all calls will be calculated like it is G.711. 
mos_g729 = no

# pcapcommand will run command after pcap file is closed (after call ends). %pcap% is substitution for real pcap file name. execution is guaranteed to run in serialized way (not in parallel)
# convert pcap file to gzip 
#pcapcommand = gzip %pcap%

# convert pcap file to bzip2 
#pcapcommand = bzip2 %pcap%

# this example will move call and releated files from one directory to another directory. 
#pcapcommand = mkdir -p "/var/spool/voipmonitor/%dirname%" ; mv /dev/shm/%dirname%/%basename%* /var/spool/voipmonitor/


# Pcap filter. If you want to sniff only UDP SIP, put here 'udp'. Warning: If you set protocol to 'udp' pcap discards VLAN packets. Maximum size is 2040 chars
filter = udp

# directory where all files (pcap|wav|graph) are stored 
spooldir = /var/spool/voipmonitor

# store pcap and graph file to <cache/dir> and move it after call ends to spool directory. Moving all files are guaranteed to be serialized which 
# solves slow random write I/O on magnetic or other media. Typical cache directory is /dev/shm/voipmonitor which is in RAM and grows
# automatically or /mnt/ssd/voipmonitor which is mounted to SSD disk or some very fast SAS/SATA disk where spool can be network storage
# or raid5 etc.
# wav files are not implemented yet
#cachedir = /dev/shm/voipmonitor


# put interface to promiscuouse mode so it can sniff packets which are not routed directly to us (it will not work if you use interface = any)
promisc = yes

# if you do not want to save cdr.callend = calldate + duration for some reason (you do not want to upgrade cdr, set it to no)
# default is yes
#sqlcallend = no

# SQL driver - mysql is default or odbc (connecting voipmonitor to msssql please refer to README.mssql
sqldriver = mysql
#sqldriver = odbc
#odbcdriver = mssql
#odbsdsn = voipmonitor
#odbcuser = root
#odbcpass = 

# mysql server
mysqlhost = 127.0.0.1

# mysql port 
#mysqlport = 3306

# mysql database
mysqldb = voipmonitor

# mysql table
mysqltable = cdr

# enable redundant cdr tables 
#sqlcdrtable_last30d = cdr_last30d
#sqlcdrtable_last7d = cdr_last7d
#sqlcdrtable_last1d = cdr_last1d

# mysql username
mysqlusername = root

# mysql password
#mysqlpassword =

